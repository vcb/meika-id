name: Security Scans
on:
  push:
    branches:
      - master
      - main
      - dev

# Add permissions for code scanning API
permissions:
  security-events: write
  contents: read

jobs:
  security-scans:
    name: SonarCloud & Snyk Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Disabling shallow clones is recommended for improving relevancy of reporting
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Cache npm dependencies using the cache action for more control
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: List dependency state on cache miss
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        run: |
          echo "Cache miss - fresh installation of dependencies"
          npm list --depth=1 || true
      
      # Install dependencies only if cache is not hit
      - name: Install dependencies
        run: |
          # Install root dependencies
          npm install
          
          # Install dependencies in each subdirectory with package.json
          if [ -d "backend" ] && [ -f "backend/package.json" ]; then
            cd backend && npm install && cd ..
          fi
          
          if [ -d "extension" ] && [ -f "extension/package.json" ]; then
            cd extension && npm install && cd ..
          fi
          
          if [ -d "web" ] && [ -f "web/package.json" ]; then
            cd web && npm install && cd ..
          fi
          
          if [ -d "circuits" ] && [ -f "circuits/package.json" ]; then
            cd circuits && npm install && cd ..
          fi
      
      # Run Snyk scans
      # 1. Scan dependencies for vulnerabilities  
      - name: Run Snyk to check for dependencies vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --sarif-file-output=snyk-deps.sarif
          
      # 2. Scan code for security issues
      - name: Run Snyk to check for code vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --sarif-file-output=snyk-code.sarif --code
      
      # Run SonarCloud scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${GITHUB_REPOSITORY/\//_}
            -Dsonar.projectName=${GITHUB_REPOSITORY}
            -Dsonar.organization=vcb
            -Dsonar.sources=.
            -Dsonar.javascript.node.maxspace=8192
            -Dsonar.javascript.node.filesSortedBySize=100
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.verbose=true
            -Dsonar.exclusions=**/node_modules/**,**/.next/**,**/dist/**,**/build/**,**/.cache/**,**/*.test.js,**/*.spec.js,**/*.test.ts,**/*.spec.ts,**/coverage/**
      
      # Combine Snyk's SARIF files
      - name: Combine Snyk's SARIF files
        run: |
          echo '{"version":"2.1.0","runs":[]}' > combined.sarif
          jq -s '.[0].runs = ([.[].runs] | flatten) | .[0]' combined.sarif snyk-deps.sarif snyk-code.sarif > security-results.sarif
          
      # Upload scan results to GitHub Code Scanning
      - name: Upload combined security results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security-results.sarif 